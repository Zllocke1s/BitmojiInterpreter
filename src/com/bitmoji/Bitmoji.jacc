// JACC Implementation of the Bitmoji Parser

//////////////////////////////////////////
// Directives
//////////////////////////////////////////

%package com.bitmoji
%class Bitmoji
%interface BitmojiTokens
%next yynext()
%get lexer.getToken()
%semantic Object : lexer.getValue()
// Types
%token INTEGER_TYPE REAL_TYPE STRING_TYPE
// Conditionals
%token EQUALS NOT_EQUALS LESS_THAN GREATER_THAN LESS_THAN_OR_EQUAL GREATER_THAN_OR_EQUAL
// Arithmetic Operators
%token ADD SUBTRACT MULTIPLY DIVIDE EXPONENT
// Grouping
%token LEFT_BRACKET RIGHT_BRACKET LEFT_PARENTHESIS RIGHT_PARENTHESIS
// Assignment
%token ASSIGN
// Control
%token START_WHILE END_WHILE IF ELIF ELSE START_THEN END_THEN
// Functions
%token FUNCTION_DEF START_FUNCTION_STATEMENTS END_FUNCTION_STATEMENTS RETURN PARAMETER_COMMA
// Literals
%token REAL_LITERAL INT_LITERAL
%token <String> STRING_LITERAL
// IO
%token INPUT OUTPUT
// Other
%token ID START_PROGRAM END_PROGRAM NEWLINE
%left SUBTRACT
%right ASSIGN

%%
//////////////////////////////////////////
// Grammar Rules
//////////////////////////////////////////
program                 : START_PROGRAM stmnt_list END_PROGRAM
                        {
                            program = (BitmojiPT.StatementListNode) $2;
                        }
                        ;

stmnt_list              : stmnt_list statement
                        {
                            ((BitmojiPT.StatementListNode) $1).add((BitmojiPT.StatementNode) $2);
                            $$ = $1;
                        }
			            | statement
			            {
			                $$ = tree.new StatementListNode((BitmojiPT.StatementNode) $1);
			            }
			            ;

statement               : assignment
		                | while_statement
		                | input
		                | output
		                | conditional
		                | function_call
		                | function_def //Does this go in the program NT or does it go outside program NT?
		                ;



ref                     : ID LEFT_BRACKET expr RIGHT_BRACKET { $$ = tree.new ReferenceArrNode($1.toString(), $3); }
	                    | ID
	                    {
	                        $$ = tree.new ReferenceVarNode($1.toString());
	                    }
	                    ;

		   
expr                    : expr ADD term
                        {
                            $$ = tree.new BinaryOperatorNode($1, $3, "+");
                        }
	                    | expr SUBTRACT term
                        {
                            $$ = tree.new BinaryOperatorNode($1, $3, "-");
                        }
	                    | term
	                    ;
	 
term                    : term MULTIPLY factor
                        {
                            $$ = tree.new BinaryOperatorNode($1, $3, "*");
                        }
	                    | term DIVIDE factor
                        {
                            $$ = tree.new BinaryOperatorNode($1, $3, "/");
                        }
	                    | factor
	                    ;
	 
factor                  : factor EXPONENT exp
                        {
                            $$ = tree.new BinaryOperatorNode($1, $3, "**");
                        }
	                    | exp
	                    ;

exp                     : LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
                        {
                            $$ = tree.new GroupNode($2);
                        }
	                    | ref
	                    | function_call
	                    | REAL_LITERAL
	                    {
                            $$ = (Double) $1;
                        }
	                    | INT_LITERAL
	                    {
                            $$ = (Integer) $1;
                        }
                        | cast
	                    ;
	
assignment              : ref ASSIGN assignable
                        {
                            $$ = tree.new AssignNode((BitmojiPT.ReferenceNode) $1, $3);
                        }
		                ;

assignable              : STRING_LITERAL
                        | equality
                        ;

while_statement         : START_WHILE equality stmnt_list END_WHILE
                        {
                            $$ = tree.new WhileLoopNode($2, (BitmojiPT.StatementListNode) $3);
                        }
				        ;
				
input                   : INPUT ref
                        {
                            $$ = tree.new InputNode((BitmojiPT.ReferenceNode) $2);
                        }
	                    ;

output                  : OUTPUT assignable
                        {
                            $$ = tree.new OutputNode($2, false);
                        }
                        | OUTPUT assignable NEWLINE
                        {
                            $$ = tree.new OutputNode($2, true);
                        }
	                    ;

conditional             : if_statement
			            | if_statement elif_block_statement
                        	 {
                                ((BitmojiPT.ConditionalBlockNode) $1).addToList((BitmojiPT.ElifBlockNode) $2);
                                $$ = $1;
                             }
			            | if_statement else_statement
			             {
                            ((BitmojiPT.ConditionalBlockNode) $1).addToList((BitmojiPT.ConditionalNode) $2);
                            $$ = $1;
                         }
                         | if_statement elif_block_statement else_statement
                         {
                            ((BitmojiPT.ConditionalBlockNode) $1).addToList((BitmojiPT.ElifBlockNode) $2);
                            ((BitmojiPT.ConditionalBlockNode) $1).addToList((BitmojiPT.ConditionalNode) $3);
                            $$ = $1;
                         }
                         ;

if_statement            : IF LEFT_PARENTHESIS equality RIGHT_PARENTHESIS START_THEN stmnt_list END_THEN
                        {
                            $$ = tree.new ConditionalBlockNode($3, (BitmojiPT.StatementListNode) $6);
                        }

			            ;

elif_statement          : ELIF LEFT_PARENTHESIS equality RIGHT_PARENTHESIS START_THEN stmnt_list END_THEN
			             {
                            $$ = tree.new ConditionalNode($3, (BitmojiPT.StatementListNode) $6);
                         }
                         ;

elif_block_statement    : elif_statement
                        {
                            $$ = tree.new ElifBlockNode((BitmojiPT.ConditionalNode)$1);
                        }
                        | elif_block_statement elif_statement
                        {
                            ((BitmojiPT.ElifBlockNode) $1).addToList((BitmojiPT.ConditionalNode) $2);
                            $$ = $1;
                        }
			            ;

else_statement          : ELSE START_THEN stmnt_list END_THEN
                        {
                            $$ = tree.new ConditionalNode(true, (BitmojiPT.StatementListNode) $3);
                        }
			            ;

function_call           : ID LEFT_PARENTHESIS ref_list RIGHT_PARENTHESIS
			            ;
			  
ref_list                : ref_list PARAMETER_COMMA ref
		                | ref
		                ;

function_def            : FUNCTION_DEF ID LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS START_FUNCTION_STATEMENTS stmnt_list RETURN LEFT_PARENTHESIS expr RIGHT_PARENTHESIS END_FUNCTION_STATEMENTS
			            ;
		   
parameter_list          : parameter_list PARAMETER_COMMA ID
			            | ID
			            ;
			   

equality                : equality EQUALS relational
                        {
                            $$ = tree.new BinaryOperatorNode($1, $3, "==");
                        }
		                | equality NOT_EQUALS relational
                        {
                            $$ = tree.new BinaryOperatorNode($1, $3, "!=");
                        }
		                | relational
		                ;
		 
relational              : relational GREATER_THAN expr
                        {
                            $$ = tree.new BinaryOperatorNode($1, $3, ">");
                        }
		                | relational GREATER_THAN_OR_EQUAL expr
                        {
                            $$ = tree.new BinaryOperatorNode($1, $3, ">=");
                        }
		                | relational LESS_THAN expr
                        {
                            $$ = tree.new BinaryOperatorNode($1, $3, "<");
                        }
		                | relational LESS_THAN_OR_EQUAL expr
                        {
                            $$ = tree.new BinaryOperatorNode($1, $3, "<=");
                        }
		                | expr
		                ;

cast                    : STRING_TYPE LEFT_PARENTHESIS relational RIGHT_PARENTHESIS
                        {
                            $$ = tree.new StringCastNode($3);
                        }
                        | INTEGER_TYPE LEFT_PARENTHESIS relational RIGHT_PARENTHESIS
                        {
                            $$ = tree.new IntegerCastNode($3);
                        }
                        | REAL_TYPE LEFT_PARENTHESIS relational RIGHT_PARENTHESIS
                        {
                            $$ = tree.new RealCastNode($3);
                        }
                        ;


%%

//////////////////////////////////////////
// Extra Code
//////////////////////////////////////////

    private BitmojiLexer lexer;
    private int token;
    private Object yylvalue;
    private BitmojiPT tree;
    private BitmojiPT.PTNode program;

    public int yynext() {
        lexer.next();
        token = lexer.getToken();
        yylvalue = lexer.getValue();

        return token;
    }

    public void yyerror(String msg) {
        lexer.printError("ERROR: " + msg);
    }

    public Bitmoji(java.io.InputStream in) {
        lexer = new BitmojiLexer(in);
        tree = new BitmojiPT(this);
    }

    public BitmojiPT.PTNode getProgram() {
        return program;
    }

    public static void main(String [] args) {
        String filename="";

        filename = args[0];

        try {
            Bitmoji parser = new Bitmoji(new java.io.FileInputStream(filename));
            parser.yynext();
            parser.parse();

            parser.getProgram().evaluate();

        } catch(java.io.FileNotFoundException e) {
            System.err.println("Could not open file.");
        } catch(java.io.IOException e) {
            System.err.println("File Write Error");
        }
    }