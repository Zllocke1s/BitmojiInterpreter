// JACC Implementation of the Looplang Parser

//////////////////////////////////////////
// Directives
//////////////////////////////////////////
%class Looplang
%interface LooplangTokens
%next yynext()
%get lexer.getToken()
%semantic Object : lexer.getValue()

%token ARRAY LBRACKET RBRACKET ASSIGN MINUS WHILE END IN OUT ID LITERAL
%left MINUS
%right ASSIGN 

%%
//////////////////////////////////////////
// Grammar Rules
//////////////////////////////////////////
program : stmnt_list 
          { 
             program = tree.new 
               ProgramNode((LooplangParseTree.StatementListNode)$1); 
          }
          ;

stmnt_list : statement 
             { 
               $$ = tree.new StatementListNode(
                  (LooplangParseTree.StatementNode) $1
               ); 
             }
            | stmnt_list statement  
              { 
                ((LooplangParseTree.StatementListNode)$1).add(
                     (LooplangParseTree.StatementNode) $2
                );
                $$=$1;
              }
            ;

statement:   array_decl  
           | assignment  
           | while       
           | input       
           | output      
           ;

array_decl: ARRAY LBRACKET LITERAL RBRACKET ID 
            {
              $$ = tree.new ArrayDeclNode($5.toString(), (Integer) $3);
            }
           ;

assignment: ref ASSIGN expr 
            {
              $$ = tree.new AssignNode((LooplangParseTree.RefNode)$1, 
                                       (LooplangParseTree.ParseNode)$3);
            }
           ;

expr: expr MINUS expr  
      {
        $$ = tree.new BinOpNode((LooplangParseTree.ParseNode)$1,  
                                "-", 
                                (LooplangParseTree.ParseNode)$3);
      }
    | LITERAL 
      { 
        $$ = tree.new LiteralNode((Integer)$1); 
      }
    | ref              
    ;

while: WHILE ref stmnt_list END 
       {
         $$ = tree.new WhileNode((LooplangParseTree.RefNode) $2, 
                                 (LooplangParseTree.StatementListNode)$3);
       }
       ;

input: IN ref 
       { 
         $$ = tree.new InputNode((LooplangParseTree.RefNode) $2); 
       }
       ;

output: OUT ref 
        { 
          $$ = tree.new OutputNode((LooplangParseTree.RefNode) $2); 
        }
        ;

ref: ID LBRACKET expr RBRACKET 
     { 
       $$ = tree.new RefNode($1.toString(), (LooplangParseTree.ParseNode) $3); 
     }
     ;

%%

//////////////////////////////////////////
// Extra Code
//////////////////////////////////////////

    private LooplangLexer lexer;
    private int token;
    private Object yylvalue;
    private LooplangParseTree tree;
    private LooplangParseTree.ProgramNode program;

    public int yynext() {
        lexer.next();
        token = lexer.getToken();
        yylvalue = lexer.getValue();

        return token;
    }

    public void yyerror(String msg) {
        lexer.printError("ERROR: " + msg);
    }

    public Looplang(java.io.InputStream in) {
        lexer = new LooplangLexer(in); 
        tree = new LooplangParseTree(this);
    }


    public LooplangParseTree.ProgramNode getProgram() {
        return program;
    }


    public static void main(String [] args) {
        boolean interpret = true;
        boolean printTree = false;
        boolean compile = false;
        String filename="";

        //process command line
        for(int i=0; i<args.length; i++) {
            if(args[i].equals("-c")) {
                interpret = false;
                compile = true;
            } else if(args[i].equals("-t")) {
                printTree = true;
            } else {
                filename = args[i];
            }
        }

        try {
            Looplang parser = new Looplang(new java.io.FileInputStream(filename));
            parser.yynext();
            parser.parse();
 
            //print the tree
            if(printTree) {
                parser.getProgram().print("");
            }

            //interpret the code
            if(interpret) {
                parser.getProgram().evaluate();
            }

            //compile the code to c
            if(compile) {
                java.io.FileOutputStream file = new java.io.FileOutputStream(filename.split("\\.")[0] + ".c");
                file.write(parser.getProgram().generate().getBytes());
                file.close();
            }

        } catch(java.io.FileNotFoundException e) {
            System.err.println("Could not open file.");
        } catch(java.io.IOException e) {
            System.err.println("File Write Error");
        }
    }